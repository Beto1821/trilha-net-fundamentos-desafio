namespace DesafioFundamentos.Models
{
    public class Estacionamento
    {
        private decimal precoInicial = 0;
        private decimal precoPorHora = 0;
        private List<string> veiculos = new List<string>();

        public Estacionamento(decimal precoInicial, decimal precoPorHora)
        {
            this.precoInicial = precoInicial;
            this.precoPorHora = precoPorHora;
        }

        public void AdicionarVeiculo()
        {
            Console.Write("üöó Digite a placa do ve√≠culo (ex: ABC-1234): ");
            string placa = Console.ReadLine();
            
            // Valida√ß√£o de entrada
            if (!string.IsNullOrWhiteSpace(placa))
            {
                // Verifica se j√° existe
                if (veiculos.Any(x => x.ToUpper() == placa.ToUpper()))
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine($"‚ö†Ô∏è  Ve√≠culo {placa.ToUpper()} j√° est√° estacionado!");
                    Console.ResetColor();
                }
                else
                {
                    veiculos.Add(placa.ToUpper());
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine($"‚úÖ Ve√≠culo {placa.ToUpper()} cadastrado com sucesso!");
                    Console.ResetColor();
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå Placa inv√°lida! Tente novamente.");
                Console.ResetColor();
            }
        }

        public void RemoverVeiculo()
        {
            if (!veiculos.Any())
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è  N√£o h√° ve√≠culos estacionados no momento.");
                Console.ResetColor();
                return;
            }

            Console.WriteLine("üìã Ve√≠culos estacionados:");
            Console.WriteLine(new string('‚îÄ', 30));
            for (int i = 0; i < veiculos.Count; i++)
            {
                Console.WriteLine($"üöó {i + 1}¬∞ - {veiculos[i]}");
            }
            Console.WriteLine(new string('‚îÄ', 30));
            
            Console.Write("üîç Digite a placa do ve√≠culo para remover: ");
            string placa = Console.ReadLine();

            // Verifica se o ve√≠culo existe ANTES de remover
            if (veiculos.Any(x => x.ToUpper() == placa.ToUpper()))
            {
                Console.Write("‚è∞ Digite a quantidade de horas estacionado: ");
                
                if (int.TryParse(Console.ReadLine(), out int horas) && horas >= 0)
                {
                    // Calcula o valor total
                    decimal valorTotal = precoInicial + precoPorHora * horas;
                    
                    // Remove o ve√≠culo da lista
                    veiculos.RemoveAll(x => x.ToUpper() == placa.ToUpper());

                    Console.WriteLine(new string('‚îÄ', 40));
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine($"‚úÖ Ve√≠culo {placa.ToUpper()} foi removido!");
                    Console.WriteLine($"üí∞ Valor total: R$ {valorTotal:F2}");
                    Console.WriteLine($"   ‚Ä¢ Pre√ßo inicial: R$ {precoInicial:F2}");
                    Console.WriteLine($"   ‚Ä¢ {horas}h √ó R$ {precoPorHora:F2} = R$ {precoPorHora * horas:F2}");
                    Console.ResetColor();
                    Console.WriteLine(new string('‚îÄ', 40));
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("‚ùå Quantidade de horas inv√°lida! Digite um n√∫mero v√°lido.");
                    Console.ResetColor();
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå Ve√≠culo n√£o encontrado! Confira se digitou a placa corretamente.");
                Console.ResetColor();
            }
        }

        public void ListarVeiculos()
        {
            // Verifica se h√° ve√≠culos no estacionamento
            if (veiculos.Any())
            {
                Console.WriteLine($"üìä Total de ve√≠culos estacionados: {veiculos.Count}");
                Console.WriteLine(new string('‚ïê', 45));
                
                for (int i = 0; i < veiculos.Count; i++)
                {
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.WriteLine($"üöó {i + 1:D2}¬∞ - {veiculos[i]}");
                    Console.ResetColor();
                }
                
                Console.WriteLine(new string('‚ïê', 45));
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"üí∞ Pre√ßo por hora: R$ {precoPorHora:F2}");
                Console.ResetColor();
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("üì≠ N√£o h√° ve√≠culos estacionados no momento.");
                Console.WriteLine("üöó Use a op√ß√£o 1 para cadastrar o primeiro ve√≠culo!");
                Console.ResetColor();
            }
        }
    }
}
